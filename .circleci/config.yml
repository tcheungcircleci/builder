# Visual Composer Website Builder circleci config file

version: 2
jobs:
  js-codestyle:
    docker:
      - image: visualcomposer/ci-wordpress:php7.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-node-codestyle-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
      - run: npm install -g n
      - run: n 14
      - run: yarn install
      - run: yarn lint
      - save_cache:
          key: v1-node-codestyle-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
  php-codestyle:
    docker:
      - image: visualcomposer/ci-wordpress:php7.3
    steps:
      - checkout
      - run:
          name: CodeStyle install
          command: php ci/composer.phar install -d ci/
      - run:
          name: CodeStyle
          command: php ci/vendor/bin/phpcs --standard=ci/ruleset.xml plugin-wordpress.php bootstrap visualcomposer/Framework visualcomposer/Helpers visualcomposer/Modules visualcomposer/Application.php visualcomposer/Requirements.php
  php-tests:
    docker:
      - image: visualcomposer/ci-wordpress:circleci-php-apache-chrome
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: mate
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          WP_TESTS_DIR: /opt/wp-tests
          WP_TESTS_DOMAIN: localhost
          WP_TESTS_ABSPATH: /var/www/html/
          WP_TESTS_DB_NAME: test
          WP_TESTS_DB_USER: wpuser
          WP_TESTS_DB_HOST: 127.0.0.1
      - image: mariadb:10.3.13-bionic
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 10s
      - run:
          name: Setup mysql and apache2
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="CREATE DATABASE test;"
            mysql -h 127.0.0.1 --user="root" --execute="CREATE USER 'wpuser'@'127.0.0.1'; GRANT ALL PRIVILEGES ON test.* TO 'wpuser'@'127.0.0.1';"
            sudo apachectl start
      - run:
          name: Install Wordpress
          command: |
            wp core config --path=/var/www/html --dbhost=127.0.0.1 --dbname=test --dbuser=wpuser --allow-root
            wp core install --url=http://localhost --title=Test --admin_user=admin --admin_password=12345 --admin_email=test@test.com --path=/var/www/html --skip-email --allow-root --debug
            sudo chmod 777 -R /var/www/html/wp-content
            sudo chown www-data:www-data -R /var/www/html/wp-content/uploads
            sudo apt update && sudo apt install nano
      - run: php ci/composer.phar install
      - run: php tools/php-composer/cli.php
      - run: php -d 'zend_extension=xdebug.so' ci/phpunit-9.0.0.phar --configuration=ci/phpunit-all-coverage.xml
      - run: php ci/coverage-test.php
  end-2-end-tests-chrome:
    docker:
      - image: visualcomposer/ci-wordpress:circleci-php-apache-chrome
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: mate
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          WP_TESTS_DIR: /opt/wp-tests
          WP_TESTS_DOMAIN: localhost
          WP_TESTS_ABSPATH: /var/www/html/
      - image: mariadb:10.3.13-bionic
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Setup mysql and apache2
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="CREATE DATABASE test;"
            mysql -h 127.0.0.1 --user="root" --execute="CREATE USER 'wpuser'@'127.0.0.1'; GRANT ALL PRIVILEGES ON test.* TO 'wpuser'@'127.0.0.1';"
            sudo apachectl start
      - run:
          name: Install Wordpress
          command: |
            wp core config --path=/var/www/html --dbhost=127.0.0.1 --dbname=test --dbuser=wpuser --allow-root
            wp core install --url=http://localhost --title=Test --admin_user=admin --admin_password=12345 --admin_email=test@test.com --path=/var/www/html --skip-email --allow-root --debug
            curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
            sudo apt update && sudo apt install nano
      - run: php ci/composer.phar install
      - run:
          name: Link files and directories
          command: |
            echo "<?php VcvEnv::set('VCV_ENV_DEV_ELEMENTS', true); VcvEnv::set('VCV_ENV_DEV_ADDONS', true); VcvEnv::set('VCV_ENV_EXTENSION_DOWNLOAD', false); require_once(__DIR__ . '/env.php');" > env-dev.php
            ln -s $(pwd) /var/www/html/wp-content/plugins/builder
            sudo chmod 777 -R /var/www/html/wp-content
            sudo chown www-data:www-data -R /var/www/html/wp-content/uploads
      - restore_cache:
          keys:
            - v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install node modules
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Cache node_modules
          key: v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build project
          command: |
            yarn build
            yarn build-settings
            bash tools/elements/buildScript.sh
      - run:
          name: Activate plugin
          command: wp plugin activate --all --path=/var/www/html
      - run:
          name: Add free license to db
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-license-type', 'free', 'yes');"
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-license-expiration', 'lifetime', 'yes');"
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-settings-initial-helpers-enabled', '', 'yes');"
      - run: yarn run cypress install
      - run: sudo chown www-data:www-data -R /var/www/html/wp-content/uploads
      - run: yarn run cypress run --browser=chrome --project ./tests/cypressChrome
      - store_artifacts:
          path: ./tests/cypressChrome/cypress/snapshots
      - store_artifacts:
          path: ./tests/cypressChrome/cypress/videos
      - store_artifacts:
          path: ./tests/cypressChrome/cypress/screenshots
  end-2-end-tests-electron:
    docker:
      - image: visualcomposer/ci-wordpress:circleci-php-apache-chrome
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: mate
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          WP_TESTS_DIR: /opt/wp-tests
          WP_TESTS_DOMAIN: localhost
          WP_TESTS_ABSPATH: /var/www/html/
      - image: mariadb:10.3.13-bionic
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    steps:
      - checkout
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Setup mysql and apache2
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="CREATE DATABASE test;"
            mysql -h 127.0.0.1 --user="root" --execute="CREATE USER 'wpuser'@'127.0.0.1'; GRANT ALL PRIVILEGES ON test.* TO 'wpuser'@'127.0.0.1';"
            sudo apachectl start
      - run:
          name: Install Wordpress
          command: |
            wp core config --path=/var/www/html --dbhost=127.0.0.1 --dbname=test --dbuser=wpuser --allow-root
            wp core install --url=http://localhost --title=Test --admin_user=admin --admin_password=12345 --admin_email=test@test.com --path=/var/www/html --skip-email --allow-root --debug
            sudo apt update && sudo apt install nano
      - run: php ci/composer.phar install
      - run:
          name: Link files and directories
          command: |
            echo "<?php VcvEnv::set('VCV_ENV_DEV_ELEMENTS', false); VcvEnv::set('VCV_ENV_DEV_ADDONS', false); VcvEnv::set('VCV_ENV_EXTENSION_DOWNLOAD', true); require_once(__DIR__ . '/env.php');" > env-dev.php
            ln -s $(pwd) /var/www/html/wp-content/plugins/builder
            sudo chmod 777 -R /var/www/html/wp-content
            sudo chown www-data:www-data -R /var/www/html/wp-content/uploads
      - restore_cache:
          keys:
            - v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install node modules
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Cache node_modules
          key: v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build project
          command: |
            yarn build
            yarn build-settings
            bash tools/elements/buildScript.sh
      - run:
          name: Activate plugin
          command: wp plugin activate --all --path=/var/www/html
      - run:
          name: Add free license to db
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-license-type', 'free', 'yes');"
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-license-expiration', 'lifetime', 'yes');"
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-settings-initial-helpers-enabled', '', 'yes');"
      - run: yarn run cypress install
      - run: yarn run cypress run --project ./tests/cypressElectron
      - store_artifacts:
          path: ./tests/cypressElectron/cypress/snapshots
      - store_artifacts:
          path: ./tests/cypressElectron/cypress/videos
      - store_artifacts:
          path: ./tests/cypressElectron/cypress/screenshots
  end-2-end-tests-pipeline:
    docker:
      - image: visualcomposer/ci-wordpress:circleci-php-apache-chrome
        environment:
          MYSQL_HOST: 127.0.0.1
          MYSQL_DB: mate
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          WP_TESTS_DIR: /opt/wp-tests
          WP_TESTS_DOMAIN: localhost
          WP_TESTS_ABSPATH: /var/www/html/
      - image: mariadb:10.3.13-bionic
        command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_bin --innodb-large-prefix=true --innodb-file-format=Barracuda
        environment:
          MYSQL_USER: root
          MYSQL_ALLOW_EMPTY_PASSWORD: true
    parallelism: 2
    steps:
      - checkout
      - run:
          name: Wait for db
          command: dockerize -wait tcp://localhost:3306 -timeout 1m
      - run:
          name: Setup mysql and apache2
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="CREATE DATABASE test;"
            mysql -h 127.0.0.1 --user="root" --execute="CREATE USER 'wpuser'@'127.0.0.1'; GRANT ALL PRIVILEGES ON test.* TO 'wpuser'@'127.0.0.1';"
            sudo apachectl start
      - run:
          name: Install Wordpress
          command: |
            wp core config --path=/var/www/html --dbhost=127.0.0.1 --dbname=test --dbuser=wpuser --allow-root
            wp core install --url=http://localhost --title=Test --admin_user=admin --admin_password=12345 --admin_email=test@test.com --path=/var/www/html --skip-email --allow-root --debug
            wp theme install visual-composer-starter --activate --path=/var/www/html
            curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null && echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list && sudo apt update && sudo apt install ngrok
            sudo apt update && sudo apt install nano
      - run: php ci/composer.phar install
      - run:
          name: Link files and directories
          command: |
            echo "<?php VcvEnv::set('VCV_ENV_DEV_ELEMENTS', false); VcvEnv::set('VCV_ENV_DEV_ADDONS', false); VcvEnv::set('VCV_ENV_EXTENSION_DOWNLOAD', true); require_once(__DIR__ . '/env.php');" > env-dev.php
            echo "<?php require_once(dirname(__FILE__) . '/wp-load.php'); \$domain = \$_SERVER['SERVER_NAME']; update_option('home', 'http://' . \$domain); update_option('siteurl', 'http://' . \$domain); echo 'homeurl: ' . get_option('home'); echo 'siteurl: ' . get_option('siteurl'); \$file = file_get_contents(__DIR__ . '/wp-content/plugins/builder/tests/cypressPipeline/cypress.json'); \$json = json_decode(\$file, true); \$json['baseUrl'] = 'http://' . \$domain; \$json['env']['baseUrl'] = 'http://' . \$domain; \$json = json_encode(\$json, JSON_PRETTY_PRINT); file_put_contents(__DIR__.'/wp-content/plugins/builder/tests/cypressPipeline/cypress.json', \$json);" > /var/www/html/setup-ngrok.php
            ln -s $(pwd) /var/www/html/wp-content/plugins/builder
            sudo chmod 777 -R /var/www/html/
            sudo chown www-data:www-data -R /var/www/html
      - restore_cache:
          keys:
            - v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
      - run:
          name: Install node modules
          command: yarn install --frozen-lockfile
      - save_cache:
          name: Cache node_modules
          key: v1.1-node-e2e-{{ arch }}-{{ .Branch }}-{{ checksum "package.json" }}
          paths:
            - ./node_modules
      - run:
          name: Build project
          command: |
            yarn build
            yarn build-settings
            bash tools/elements/buildScript.sh
      - run:
          name: Activate plugin
          command: wp plugin activate --all --path=/var/www/html
      - run:
          name: Add free license to db
          command: |
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-agreeHubTerms', '1658314019', 'yes');"
            mysql -h 127.0.0.1 --user="root" --execute="REPLACE INTO test.wp_options (option_name, option_value, autoload)  VALUES ('vcv-settings-initial-helpers-enabled', '', 'yes');"
      - run: yarn add cypress@^11.0.1
      # - run:
      #     name: Install coverage reporter
      #     command: yarn add cypress-circleci-reporter mocha --dev
      - run: |
          mkdir test_results
          cd tests/cypressPipeline
          yarn add cypress-circleci-reporter mocha --dev
          TEST_FILES=$(find ./cypress/e2e -name "*.cy.js")
          echo "$TEST_FILES" | circleci tests run --command="xargs npx cypress run --record --key 09ed9a2e-d563-4bc8-9314-0546c9e53a51 --reporter ../../node_modules/cypress-circleci-reporter --spec" --verbose --split-by=timings
      - store_test_results:
          path: test_results
      - store_artifacts:
          path: ./tests/cypressPipeline/cypress/snapshots
      - store_artifacts:
          path: ./tests/cypressPipeline/cypress/videos
      - store_artifacts:
          path: ./tests/cypressPipeline/cypress/screenshots
  js-stores-tests:
    docker:
      - image: visualcomposer/ci-wordpress:php7.3
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-node-js-stores-tests-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
            - v1-node-js-stores-tests-{{ arch }}-{{ checksum "yarn.lock" }}
      - run: npm install -g n
      - run: n 14
      - run: yarn install
      - run: yarn build
      - run: yarn test -u
      - save_cache:
          key: v1-node-js-stores-tests-{{ arch }}-{{ .Branch }}-{{ checksum "yarn.lock" }}
          paths:
            - ./node_modules
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
workflows:
  version: 2
  codestyle:
    jobs:
      - js-codestyle
      - php-codestyle
  tests:
    jobs:
      - php-tests
      - js-stores-tests
      - end-2-end-tests-pipeline
